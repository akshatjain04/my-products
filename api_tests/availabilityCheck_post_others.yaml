# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Test generated for /availabilityCheck_post for http method type POST in artillery framework
# RoostTestHash=2445a4c161
# 
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.url1_tresourcePoolManagement_(2)_API_HOST }}"
  phases:
    - duration: 10
      arrivalRate: 2
  plugins:
    expect: {}

scenarios:
  - name: Non-Success request responses
    flow:
      - log: "Testing with invalid Authorization credentials"
      - post:
          url: "/availabilityCheck"
          headers:
            content-type: "application/json"
            Authorization: "{{ $processEnvironment.INVALID_AUTH_TOKEN }}"
          json:
            customer:
              subscriberId: "SVTL002"
            address:
              id: 14393
              complement:
                complements: 
                - type: "ES"
                  value: "ARC201"
      - think: 2
      - expect:
          statusCode: 401
          hasProperty: ["message"]
      - log: "Testing with an invalid payload"
      - post:
          url: "/availabilityCheck"
          headers:
            content-type: "application/json"
            Authorization: "{{ $processEnvironment.url1_tresourcePoolManagement_(2)_AUTH_TOKEN }}"
          json:
            customer:
              subscriberId: "" # invalid subscriber id
            address:
              id: 14393
              complement:
                complements:
                - type: "ES"
                  value: "ARC201"
      - think: 2
      - expect:
          statusCode: 400 # invalid request
          hasProperty: ["message"]

      - log: "Testing with a nonexistent URL"
      - post:
          url: "/nonexistentURL" #invalid URL
          headers:
            content-type: "application/json"
            Authorization: "{{ $processEnvironment.url1_tresourcePoolManagement_(2)_AUTH_TOKEN }}"
          json:
            customer:
              subscriberId: "SVTL001"
            address:
              id: 14393
              complement:
                complements:
                - type: "ES"
                  value: "ARC201"
      - expect:
          statusCode: 404 # not found
          hasProperty: ["error"]

      - log: "Testing with invalid address ID type"
      - post:
          url: "/availabilityCheck"
          headers:
            content-type: "application/json"
            Authorization: "{{ $processEnvironment.url1_tresourcePoolManagement_(2)_AUTH_TOKEN }}"
          json:
            customer:
              subscriberId: "SVTL001"
            address:
              id: "InvalidID" #invalid ID type (not a number)
              complement:
                complements:
                - type: "ES"
                  value: "ARC201"
      - expect:
          statusCode: 400 # bad request
          hasProperty: ["message"]

      - log: "Testing with too long a complement"
      - post:
          url: "/availabilityCheck"
          headers:
            content-type: "application/json"
            Authorization: "{{ $processEnvironment.url1_tresourcePoolManagement_(2)_AUTH_TOKEN }}"
          json:
            customer:
              subscriberId: "SVTL001"
            address:
              id: 14393
              complement:
                complements:
                - type: "ES"
                  value: "THIS_COMPLEMENT_IS_TOO_LONG_TO_BE_ACCPETED" #value is over the maximum length
      - expect:
          statusCode: 400 # bad request
          hasProperty: ["message"]
