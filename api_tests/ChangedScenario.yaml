# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# ROOST_METHOD_HASH=ba58a4c242
# ROOST_METHOD_SIG_HASH=d3179896ca
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: Petstore E2E Flow\r\n' +
#     '    As a user of the Petstore API\r\n' +
#     '    I want to manage pets, orders, and user accounts\r\n' +
#     '    So that I can run a successful pet store business',
#   background: 'Background:\r\n' +
#     '        Given the Petstore API is available at "https://petstore.swagger.io/v2"\r\n' +
#     '        And I have valid API credentials\r\n' +
#     '        And I am authenticated with OAuth2 token with "write:pets" and "read:pets" scopes',
#   rule: null,
#   scenario: { title: 'Scenario: Changed', steps: '', examples: '' }
# }
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 60
      arrivalRate: 1
  plugins:
    expect: {}
  payload:
    path: "ChangedScenario.csv" 
    fields: ["petId", "orderId", "username"]
    skipHeader: true
    delimiter: "^|^"
  environments:
    variables:
      token: "{{ $processEnvironment.AUTH_TOKEN }}"
  defaults:
    headers:
      Authorization: "Bearer {{ token }}"
      
scenarios:
  - name: Petstore E2E Flow
    flow:
      - log: "Uploading a new image..."
      - post:
          url: "/pet/{{ petId }}/uploadImage"
          headers:
            Content-Type: "multipart/form-data"
          formData:
            additionalMetadata: "Test upload"
            file: "/path/to/file.jpg"
          expect:
            - statusCode: 200
            - hasProperty: "code"
            - hasProperty: "message"

      - log: "Adding a new pet to the store..."
      - post:
          url: "/pet"
          json:
            id: 54321
            name: "kitty"
            photoUrls: ["http://url/to/kittyphoto.jpg"]
            status: "available"
          expect:
            - statusCode: 200

      - log: "Fetching pet by ID..."
      - get:
          url: "/pet/{{ petId }}"
          expect:
            - statusCode: 200
            - hasProperty: "id"
            - hasProperty: "category"
            - hasProperty: "name"
            - hasProperty: "photoUrls"
            - hasProperty: "tags"
            - hasProperty: "status"

      - log: "Updating pet details..."
      - put:
          url: "/pet/{{ petId }}"
          json:
            id: 54321
            name: "kitty"
            photoUrls: ["http://url/to/kittyphoto.jpg"]
            status: "available"
          expect:
            - statusCode: 200
            - hasProperty: "id"
            - hasProperty: "category"
            - hasProperty: "name"
            - hasProperty: "photoUrls"
            - hasProperty: "tags"
            - hasProperty: "status"

      - log: "Finding pet by status..."
      - get:
          url: "/pet/findByStatus?status=available"
          expect:
            - statusCode: 200
            - hasProperty: "id"
            - hasProperty: "category"
            - hasProperty: "name"
            - hasProperty: "photoUrls"
            - hasProperty: "tags"
            - hasProperty: "status"
            
      - log: "Fetching inventory..."
      - get:
          url: "/store/inventory"
          headers:
            api_key: "{{ $environment.api_key }}"
          expect:
            - statusCode: 200

      - log: "Creating user..."
      - post:
          url: "/user"
          json:
            id: 12345
            username: "{{ username }}"
            firstName: "Test"
            lastName: "User"
            email: "testuser@example.com"
            password: "password1"
            phone: "1234567890"
            userStatus: 1
          expect:
            - statusCode: 200
      - think: 2
