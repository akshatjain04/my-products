# ********RoostGPT********

# Test generated by RoostGPT for test ProductOrdering-restAssured-API-Spec-test using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Test generated for /productOrder/{order.Id}_patch for http method type PATCH in artillery framework
# RoostTestHash=baabcd7d73
# 
# 

# ********RoostGPT********
config:
  target: "{{ $processEnvironment.API_HOST }}"
  phases:
    - duration: 5
      arrivalRate: 5
  payload:
    path: "./productOrder_order.Id_patch_others.csv"
    fields:
      - "orderId"
      - "correlationOrder"
      - "associatedDocument"
      - "hasSlot"
      - "date"
      - "mandatoryType"
      - "workOrderId"
      - "code"
      - "observation"
      - "updateDate"
      - "action"
    skipHeader: true
    delimiter: "^|^"
  plugins:
    expect: {}
scenarios:
  - flow:
    - log: "Attempting to PATCH Order with incorrect payload"
    - patch:
        url: "/productOrder/{{ orderId }}"
        headers:
          "Content-Type": "application/json"
          "Authorization" : "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
        json:
          order:
            correlationOrder: "{{ correlationOrder }}"
            associatedDocument: "{{ associatedDocument }}invalid"
            appointment:
              hasSlot: "{{ hasSlot }}"
              date: "{{ date }}"
              mandatoryType: "{{ mandatoryType }}"
              workOrderId: "{{ workOrderId }}"
            issue:
              code: "{{ code }}"
              observation: "{{ observation }}"
              updateDate: "{{ updateDate }}"
              action: "{{ action }}"
        expect:
          - statusCode: 400
    - think: 1
    - log: "Attempting to PATCH Order with Unauthenticated user"
    - patch:
        url: "/productOrder/{{ orderId }}"
        headers:
          "Content-Type": "application/json"
        json:
          order:
            correlationOrder: "{{ correlationOrder }}"
            associatedDocument: "{{ associatedDocument }}"
            appointment:
              hasSlot: "{{ hasSlot }}"
              date: "{{ date }}"
              mandatoryType: "{{ mandatoryType }}"
              workOrderId: "{{ workOrderId }}"
            issue:
              code: "{{ code }}"
              observation: "{{ observation }}"
              updateDate: "{{ updateDate }}"
              action: "{{ action }}"
        expect:
          - statusCode: 401
    - think: 1
    - log: "Attempting to PATCH non-existing Order"
    - patch:
        url: "/productOrder/badOrderId"
        headers:
          "Content-Type": "application/json"
          "Authorization" : "Bearer {{ $processEnvironment.AUTH_TOKEN }}"
        json:
          order:
            correlationOrder: "{{ correlationOrder }}"
            associatedDocument: "{{ associatedDocument }}"
            appointment:
              hasSlot: "{{ hasSlot }}"
              date: "{{ date }}"
              mandatoryType: "{{ mandatoryType }}"
              workOrderId: "{{ workOrderId }}"
            issue:
              code: "{{ code }}"
              observation: "{{ observation }}"
              updateDate: "{{ updateDate }}"
              action: "{{ action }}"
        expect:
          - statusCode: 404
