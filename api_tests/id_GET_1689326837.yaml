# Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-4

config:
  target: "{{ $processEnvironment.SERVER_URL }}"
  phases:
    - duration: 60
      arrivalRate: 20

scenarios:
  # Scenario 1: Successful API request
  - name: "Successful API request"
    flow:
      - post:
          url: "/api/products/{{ $processEnvironment.id }}"
          headers:
            Content-Type: "application/json"
          json:
            name: "Test Product"
            description: "This is a test product"
            price: 100
          capture:
            json: "$.id"
            as: "productId"
          expect:
            - statusCode: 200
            - hasProperty: "name"
            - hasProperty: "description"
            - hasProperty: "price"

  # Scenario 2: API request with validation failure
  - name: "API request with validation failure"
    flow:
      - post:
          url: "/api/products/{{ $processEnvironment.id }}"
          headers:
            Content-Type: "application/json"
          json:
            name: ""
            description: "This is a test product"
            price: 100
          expect:
            - statusCode: 400
            - hasProperty: "errors"
            - equals: 
                - "errors[0].message"
                - "name is required"

  # Scenario 3: API request with edge case
  - name: "API request with edge case"
    flow:
      - post:
          url: "/api/products/{{ $processEnvironment.id }}"
          headers:
            Content-Type: "application/json"
          json:
            name: "Test Product with special characters !@#$%^&*()"
            description: "This is a test product with a very long description. This description is so long that it might cause the API to behave unexpectedly. The purpose of this test is to check how the API handles large data inputs."
            price: 1000000000000
          expect:
            - statusCode: "{{ $processEnvironment.expectedStatusCode }}"
            - hasProperty: "name"
            - hasProperty: "description"
            - hasProperty: "price"
