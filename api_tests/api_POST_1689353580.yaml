# Test generated by RoostGPT for test go-test using AI Type Open AI and AI Model gpt-4

config:
  target: "http://api.example.com"
  phases:
    - duration: 60
      arrivalRate: 20
  defaults:
    headers:
      Content-Type: "application/json"
scenarios:
  - name: "Successful API request"
    flow:
      - post:
          url: "/api/products"
          json:
            key1: "value1"
            key2: "value2"
          capture:
            json: "$.message"
            as: "message"
          expect:
            - statusCode: 200
            - equals:
                - "{{ message }}"
                - "Product created successfully"

  - name: "API request with validation failure"
    flow:
      - post:
          url: "/api/products"
          json:
            key1: "value1"
          capture:
            json: "$.message"
            as: "message"
          expect:
            - statusCode: 400
            - equals:
                - "{{ message }}"
                - "Validation failed"

  - name: "API request with edge case"
    flow:
      - post:
          url: "/api/products"
          json:
            key1: "value1"
            key2: "very long string..."
          capture:
            json: "$.message"
            as: "message"
          expect:
            - statusCode: 200
            - equals:
                - "{{ message }}"
                - "Product created successfully"

  - name: "API request with query parameters"
    flow:
      - get:
          url: "/api/products"
          qs:
            key1: "value1"
          capture:
            json: "$.products[0].name"
            as: "product_name"
          expect:
            - statusCode: 200
            - equals:
                - "{{ product_name }}"
                - "Product1"

  - name: "API request with authorization"
    flow:
      - post:
          url: "/api/products"
          json:
            key1: "value1"
            key2: "value2"
          headers:
            Authorization: "Bearer {{ $processEnvironment.TOKEN }}"
          capture:
            json: "$.message"
            as: "message"
          expect:
            - statusCode: 200
            - equals:
                - "{{ message }}"
                - "Product created successfully"
