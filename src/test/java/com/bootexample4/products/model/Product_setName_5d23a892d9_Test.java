// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

Test Scenario 1: Validate "name" is successfully set when a valid string is provided
- Given: A valid string 'John Doe'
- When: setName method is called with this string
- Then: The name should be set to 'John Doe'

Test Scenario 2: Validate "name" is successfully set when an empty string is provided
- Given: An empty string ''
- When: setName method is called with this string
- Then: The name should be set to ''

Test Scenario 3: Validate that "name" throws a NullPointerException when a null value is provided
- Given: A null value
- When: setName method is called with this value
- Then: A NullPointerException should be thrown

Test Scenario 4: Validate "name" is successfully set when a string with special characters is provided
- Given: A string with special characters '!@#'
- When: setName method is called with this string
- Then: The name should be set to '!@#'

Test Scenario 5: Validate "name" is successfully set when a very long string is provided
- Given: A long string which is more than 256 characters
- When: setName method is called with this string
- Then: The name should be set to this long string

Test Scenario 6: Validate "name" is successfully set when a string with whitespaces is provided
- Given: A string with whitespaces '         '
- When: setName method is called with this string
- Then: The name should be set to '         '
*/

// ********RoostGPT********
package com.bootexample4.products.model;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class Product_setName_5d23a892d9_Test {
    
    @Test
    public void testSetNameWithValidString() {
        Product product = new Product();
        String name = "John Doe";
        product.setName(name);

        Assertions.assertEquals(name, product.getName());
    }

    @Test
    public void testSetNameWithEmptyString() {
        Product product = new Product();
        String name = "";
        product.setName(name);

        Assertions.assertEquals(name, product.getName());
    }

    @Test
    public void testSetNameWithNull() {
        Product product = new Product();

        Assertions.assertThrows(NullPointerException.class, () -> {
            product.setName(null);
        });
    }

    @Test
    public void testSetNameWithSpecialCharacters() {
        Product product = new Product();
        String name = "!@#";
        product.setName(name);

        Assertions.assertEquals(name, product.getName());
    }

    @Test
    public void testSetNameWithLongString() {
        Product product = new Product();
        String name = new String(new char[257]).replace("\0", "a");
        product.setName(name);

        Assertions.assertEquals(name, product.getName());
    }

    @Test
    public void testSetNameWithWhitespaces() {
        Product product = new Product();
        String name = "         ";
        product.setName(name);

        Assertions.assertEquals(name, product.getName());
    }
}
