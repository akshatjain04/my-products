/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Update an existing product\r\n' +
    '        Given there is an existing product with ID 1\r\n' +
    '        And the client provides the following product data:\r\n' +
    '            | name            | description                      | price |\r\n' +
    '            | Updated Product | This is an updated test product. | 15.0  |\r\n' +
    '        When the client sends a PUT request to "/api/products/1"\r\n' +
    '        Then the product with ID 1 should be updated with the provided details',
  title: 'Update an existing product'
}

*/
package com.bootexample4.RoostTest;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.equalTo;

import java.util.Map;
import org.junit.jupiter.api.Test;

public class UpdateAnExistingProductTest {
    // Setting up base URL
    private static final String BASE_URL = System.getenv("API_HOST");

    @Test
    public void testUpdateAnExistingProduct() {
        // Setting up Request Body 
        String requestPayload = "{\"name\":\"Updated Product\",\"description\":\"This is an updated test product.\",\"price\":\"15.0\"}";

        // Fetch the scenario details from CSV data
        String csvFile = "UpdateAnExistingProductTest.csv";
        CSVReader reader = new CSVReader(new FileReader(csvFile));
        String [] nextLine;
        while ((nextLine = reader.readNext()) != null) {
            String method = nextLine[0];
            String url = nextLine[1];
            String reqHeaders = nextLine[2];
            String reqBody = nextLine[3];
            int expectedResponseCode = Integer.parseInt(nextLine[4]);
            String expectedResponseBody = nextLine[5];

            // Perform test scenario
            given()
                .baseUri(BASE_URL)
                .header("Content-type", "application/json")
                .and()
                    .body(requestPayload)
                .when()
                    .put(url)
                .then()
                    .assertThat()
                    .statusCode(expectedResponseCode)
                    .and()
                    .body("id", equalTo(1))
                    .body("name", equalTo("Updated Product"))
                    .body("description", equalTo("This is an updated test product."))
                    .body("price", equalTo(15.0));
        }
    }
}
