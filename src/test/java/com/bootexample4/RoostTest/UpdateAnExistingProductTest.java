/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Update an existing product\r\n' +
    '        Given there is an existing product with ID 1\r\n' +
    '        And the client provides the following product data:\r\n' +
    '            | name            | description                      | price |\r\n' +
    '            | Updated Product | This is an updated test product. | 15.0  |\r\n' +
    '        When the client sends a PUT request to "/api/products/1"\r\n' +
    '        Then the product with ID 1 should be updated with the provided details',
  title: 'Update an existing product'
}

*/
package com.bootexample4.RoostTest;

import org.junit.jupiter.api.Test;
import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;

public class UpdateAnExistingProductTest {

    @Test
    public void updateAnExistingProductTest() throws IOException {
        // Read data from "UpdateAnExistingProductTest.csv"
        BufferedReader br = new BufferedReader(new FileReader("UpdateAnExistingProductTest.csv"));
        String line;
        while ((line = br.readLine()) != null) {
            // split the line by delimiter "^|^" to extract payload information
            String[] attributes = line.split("\\^\\|\\^");
            
            String method = attributes[0];
            String url = attributes[1];
            String reqHeadersJson = attributes[2];
            String reqBodyJson = attributes[3];
            int responseCode = Integer.parseInt(attributes[4]);
            String responseBodyJson = attributes[5];

            // Send a PUT request to "/api/products/1"
            Response response = RestAssured.given().baseUri(System.getenv("API_HOST") + url)
                .header("Content-Type", "application/json")
                .body(reqBodyJson)
                .when()
                .put();

            // Extract data from response
            int responseStatusCode = response.getStatusCode();
            String responseBody = response.getBody().asString();

            // Check status code
            assert(responseStatusCode == responseCode);
            
            // Check response data
            JsonPath jsonPath = response.jsonPath();
            assert(jsonPath.getString("name").equals("Updated Product"));
            assert(jsonPath.getString("description").equals("This is an updated test product."));
            assert(jsonPath.getFloat("price") == 15.0);
        }
        br.close();
    }
}
