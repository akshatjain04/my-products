/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Update an existing product\r\n' +
    '        Given there is an existing product with ID 1\r\n' +
    '        And the client provides the following product data:\r\n' +
    '            | name            | description                      | price |\r\n' +
    '            | Updated Product | This is an updated test product. | 15.0  |\r\n' +
    '        When the client sends a PUT request to "/api/products/1"\r\n' +
    '        Then the product with ID 1 should be updated with the provided details',
  title: 'Update an existing product'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.apache.commons.io.FileUtils;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.io.IOException;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class UpdateAnExistingProductTest {

    @Test
    public void UpdateExistingProductWithIdOne() {
        RestAssured.baseURI = System.getenv("API_HOST");

        Response getResponse = 
        given()
            .contentType(ContentType.JSON)
            .pathParam("productId", 1)
        .when()
            .get("/products/{productId}")
        .then()
            .extract().response();

        assertEquals(200, getResponse.getStatusCode(), "The response code should be 200");

        // Get the test data from the .csv file
        String csvFilePath = "UpdateAnExistingProductTest.csv";
        String csvContents = null;
        try {
            csvContents = FileUtils.readFileToString(new File(csvFilePath));
        } catch (IOException ex) {
            System.out.println("Error! Unable to read CSV file : " + ex.getMessage());
        }

        // Format and fetch test data from csvContents
        String[] testDataLines = csvContents.split("\n");
        String[] testData = testDataLines[1].split("\\^\\|\\^");

        String url = testData[1];
        Map<String, String> headers = Map.ofEntries(
            Map.entry("header1", "value1"),
            Map.entry("header2", "value2")
        );
        String payload = "{\r\n" + 
                        "  \"name\": \"Updated Product\",\r\n" + 
                        "  \"description\": \"This is an updated test product.\",\r\n" + 
                        "  \"price\": 15.0\r\n" + 
                        "}";

        Response putResponse = 
        given()
            .contentType(ContentType.JSON)
            .headers(headers)
            .body(payload)
        .when()
            .put(url)
        .then()
            .extract().response();

        // Verify correct status code and payload returned
        assertEquals(200, putResponse.getStatusCode(), "The response code should be 200");
        assertEquals("Updated Product", putResponse.jsonPath().getString("name"), "Name should be 'Updated Product'");
        assertEquals("This is an updated test product.", putResponse.jsonPath().getString("description"), "Description should match");
        assertEquals(15.0, putResponse.jsonPath().getDouble("price"), "Price should be 15.0");
    }
}
