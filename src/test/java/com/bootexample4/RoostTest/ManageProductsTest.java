/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Manage Products\r\n' +
    '        When the client sends a GET request "/api/products" to get all products\r\n' +
    '        Then the product list should be empty\r\n' +
    '\r\n' +
    '        Given the client provides product data:\r\n' +
    '            | name         | description             | price |\r\n' +
    '            | Test Product | This is a test product. | 10.0  |\r\n' +
    '        When the client sends a POST request to "/api/products"\r\n' +
    '        Then the saved product details should match the provided data\r\n' +
    '\r\n' +
    '        Given there is an existing product with ID 1\r\n' +
    '        When the client sends a GET request "/api/products/1"\r\n' +
    '        Then the response should contain the product with ID 1\r\n' +
    '\r\n' +
    '        And the client provides updated product data:\r\n' +
    '            | name            | description                      | price |\r\n' +
    '            | Updated Product | This is an updated test product. | 15.0  |\r\n' +
    '        When the client sends a PUT request to "/api/products/1"\r\n' +
    '        Then the product with ID 1 should be updated with the provided details\r\n' +
    '\r\n' +
    '        When the client sends a DELETE request to "/api/products/1"\r\n' +
    '        Then the product with ID 1 should no longer exist',
  title: 'Manage Products'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import org.testng.annotations.Test;
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class ManageProductsTest {
    JSONParser jsonParser = new JSONParser();

    @Test
    public void manageProductsTests() throws IOException, ParseException{
        RestAssured.baseURI = System.getenv("API_HOST");
        String line;
        BufferedReader reader = new BufferedReader(new FileReader("ManageProductsTest.csv"));
        reader.readLine(); // this will read the first line

        while ((line = reader.readLine()) != null) {
            String[] parts = line.split("^|^");
            String method = parts[0];
            String url = parts[1];
            JSONObject reqHeaders = (JSONObject) jsonParser.parse(parts[2]);
            JSONObject reqBody = (JSONObject) jsonParser.parse(parts[3]);
            int responseCode = Integer.parseInt(parts[4]);
            JSONObject resBody = (JSONObject) jsonParser.parse(parts[5]);

            switch(method){
                case "GET":
                    given().headers(reqHeaders).when().get(new URL(url)).then().assertThat().statusCode(equalTo(responseCode)).body(equalTo(resBody));
                    break;
                case "POST":
                    given().headers(reqHeaders).body(reqBody).when().post(new URL(url)).then().assertThat().statusCode(equalTo(responseCode)).body(equalTo(resBody));
                    break;
                case "PUT":
                    given().headers(reqHeaders).body(reqBody).when().put(new URL(url)).then().assertThat().statusCode(equalTo(responseCode)).body(equalTo(resBody));
                    break;
                case "DELETE":
                    given().headers(reqHeaders).when().delete(new URL(url)).then().assertThat().statusCode(equalTo(responseCode)).body(equalTo(resBody));
                    break;
            }
        }
    }
}
