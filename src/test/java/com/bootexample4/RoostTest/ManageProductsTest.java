/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Manage Products\r\n' +
    '        When the client sends a GET request "/api/products" to get all products\r\n' +
    '        Then the product list should be empty\r\n' +
    '\r\n' +
    '        Given the client provides product data:\r\n' +
    '            | name         | description             | price |\r\n' +
    '            | Test Product | This is a test product. | 10.0  |\r\n' +
    '        When the client sends a POST request to "/api/products"\r\n' +
    '        Then the saved product details should match the provided data\r\n' +
    '\r\n' +
    '        Given there is an existing product with ID 1\r\n' +
    '        When the client sends a GET request "/api/products/1"\r\n' +
    '        Then the response should contain the product with ID 1\r\n' +
    '\r\n' +
    '        And the client provides updated product data:\r\n' +
    '            | name            | description                      | price |\r\n' +
    '            | Updated Product | This is an updated test product. | 15.0  |\r\n' +
    '        When the client sends a PUT request to "/api/products/1"\r\n' +
    '        Then the product with ID 1 should be updated with the provided details\r\n' +
    '\r\n' +
    '        When the client sends a DELETE request to "/api/products/1"\r\n' +
    '        Then the product with ID 1 should no longer exist',
  title: 'Manage Products'
}

*/
package com.bootexample4.RoostTest;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import io.restassured.RestAssured;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class ManageProductsTest {
 
  private static String payloadFile = "ManageProductsTest.csv";
  private String baseUrl = System.getenv("API_HOST");
  
  @Test
  @DisplayName("Get All Products Scenarios")
  public void testGetAllProducts() {
    RestAssured.baseURI = baseUrl;
    
    given()
        .header("Content-Type", "application/json")
    .when()
        .get("/api/products")
    .then()
        .statusCode(200)
        .body("id", hasItems())
        .body("name", hasItems())
        .body("description", hasItems())
        .body("price", hasItems());
  }

  @Test
  @DisplayName("Add New Product Scenarios")
  public void testAddNewProduct() {
    RestAssured.baseURI = baseUrl;
    String requestBody = "{\"name\":\"Test Product\",\"description\":\"This is a test product.\",\"price\":10}";
    
    given()
        .contentType("application/json")
        .body(requestBody)
    .when()
        .post("/api/products")
    .then()
        .statusCode(200)
        .body("name", equalTo("Test Product"))
        .body("description", equalTo("This is a test product."))
        .body("price", equalTo(10));
  }

  @Test
  @DisplayName("Get Product By Id Scenarios")
  public void testGetProductById() {
    RestAssured.baseURI = baseUrl;
    
    given()
        .header("Content-Type", "application/json")
    .when()
        .get("/api/products/{productId}", 1)
    .then()
        .statusCode(200)
        .body("id", equalTo(1));
  }

  @Test
  @DisplayName("Update Product Scenarios")
  public void testUpdateProduct() {
    RestAssured.baseURI = baseUrl;
    String requestBody = "{\"name\":\"Updated Product\",\"description\":\"This is an updated test product.\",\"price\":15}";
    
    given()
        .contentType("application/json")
        .body(requestBody)
    .when()
        .put("/api/products/{productId}", 1)
    .then()
        .statusCode(200)
        .body("name", equalTo("Updated Product"))
        .body("description", equalTo("This is an updated test product."))
        .body("price", equalTo(15));
  }

  @Test
  @DisplayName("Delete Product Scenarios")
  public void testDeleteProduct() {
    RestAssured.baseURI = baseUrl;
    
    given()
        .header("Content-Type", "application/json")
    .when()
        .delete("/api/products/{productId}", 1)
    .then()
        .statusCode(200)
        .body("description", equalTo("Product deleted"));
  }
}
