// ********RoostGPT********
/*
Test generated by RoostGPT for test restAssured-Integration-petstore using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=436997a5cf
ROOST_METHOD_SIG_HASH=809947a8ba

 ########## Scenario ########## 

{
  feature: 'Feature: Petstore E2E Flow\r\n' +
    '    As a user of the Petstore API\r\n' +
    '    I want to manage pets, orders, and user accounts\r\n' +
    '    So that I can run a successful pet store business',
  background: 'Background:\r\n' +
    '        Given the Petstore API is available at "https://petstore.swagger.io/v2"\r\n' +
    '        And I have valid API credentials\r\n' +
    '        And I am authenticated with OAuth2 token with "write:pets" and "read:pets" scopes',
  rule: null,
  scenario: {
    title: 'Scenario: Bulk operations',
    steps: 'Given I have multiple users to create\r\n' +
      'When I create users with array input\r\n' +
      '            | username  | email          | firstName | lastName |\r\n' +
      '            | bulkuser1 | bulk1@test.com | Bulk      | User1    |\r\n' +
      '            | bulkuser2 | bulk2@test.com | Bulk      | User2    |\r\n' +
      'Then all users should be created successfully\r\n' +
      'Given I have multiple pets to add\r\n' +
      'When I add the following pets:\r\n' +
      '            | name    | category | status    |\r\n' +
      '            | Max     | Dog      | available |\r\n' +
      '            | Charlie | Dog      | available |\r\n' +
      'Then all pets should be added successfully',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.FileSystems;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

class BulkOperationsTest {

    private BufferedReader reader = null;

    @BeforeEach
    public void setUp() throws IOException {
        String payloadFilePath = "src" + FileSystems.getDefault().getSeparator() + "test" + FileSystems.getDefault().getSeparator() + "java" + FileSystems.getDefault().getSeparator() + "com" + FileSystems.getDefault().getSeparator() + "bootexample4" + FileSystems.getDefault().getSeparator() + "RoostTest" + FileSystems.getDefault().getSeparator() + "BulkOperationsTest.csv";
        reader = new BufferedReader(new FileReader(payloadFilePath));
        String headers = reader.readLine(); // ignore the headers
    }

    @Test
    public void testBulkOperations() throws IOException {
        String line;
        int testNumber = 1;
        while ((line = reader.readLine()) != null) {
            if (line.isEmpty()) continue;
            String[] row = line.split("\\^\\|\\^");
            String methodType = row[0];
            String url = row[1];
            String headers = row[2];
            String requestBody = row[3];
            String responseCode = row[4];
            String responseBody = !row[5].equals("undefined") ? row[5] : null;

            System.out.println("Running test #" + testNumber + " using method type: " + methodType + " on URL: " + url);
            RequestSpecification requestSpecification = RestAssured.given();
            prepareHeader(headers, requestSpecification);
            if(!requestBody.equals("undefined")) {
                JSONObject requestJson = new JSONObject(requestBody);
                requestSpecification.body(requestJson.toString());
            }

            Response response;
            switch (methodType.toLowerCase()) {
                case "post":
                   response = requestSpecification.post(url);
                   break;
                default:
                   throw new IllegalStateException("Unexpected method type: " + methodType);
            }

            assertEquals(Integer.parseInt(responseCode), response.getStatusCode());

            if(responseBody != null){
                JSONObject responseJson = new JSONObject(responseBody);
                assertEquals(responseJson.toString(), response.body().asString());
            }

            testNumber++;
        }
        reader.close();
    }

    private void prepareHeader(String headers, RequestSpecification requestSpecification){
        String[] headerOptions = headers.split(",");
        for (String option : headerOptions) {
            String[] pair = option.split(":");
            requestSpecification.header(pair[0].trim(), pair[1].trim());
        }
    }
}
