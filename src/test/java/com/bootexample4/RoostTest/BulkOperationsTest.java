// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=579264a708
ROOST_METHOD_SIG_HASH=809947a8ba

 ########## Scenario ########## 

{
  feature: 'Feature: Petstore E2E Flow\r\n' +
    '    As a user of the Petstore API\r\n' +
    '    I want to manage pets, orders, and user accounts\r\n' +
    '    So that I can run a successful pet store business',
  background: 'Background:\r\n' +
    '        Given the Petstore API is available at "https://petstore.swagger.io/v2"\r\n' +
    '        And I have valid API credentials\r\n' +
    '        And I am authenticated with OAuth2 token with "write:pets" and "read:pets" scopes',
  rule: null,
  scenario: {
    title: 'Scenario: Bulk operations',
    steps: 'Given I have multiple users to create\r\n' +
      'When I create users with array input\r\n' +
      '            | username  | email          | firstName | lastName |\r\n' +
      '            | bulkuser1 | bulk1@test.com | Bulk      | User1    |\r\n' +
      '            | bulkuser2 | bulk2@test.com | Bulk      | User2    |\r\n' +
      'Then all users should be created successfully\r\n' +
      'Given I have multiple pets to add\r\n' +
      'When I add the following pets:\r\n' +
      '            | name    | category | status    |\r\n' +
      '            | Max     | Dog      | available |\r\n' +
      '            | Charlie | Dog      | available |\r\n' +
      'Then all pets should be added successfully',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.bootexample4.RoostTest;
import io.restassured.response.Response;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.nio.file.Files;
import java.nio.file.Paths;
import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;

public class BulkOperationsTest {
  static String filePath = "src" + System.getProperty("file.separator") + "test" + 
                            System.getProperty("file.separator") + "java" + 
                            System.getProperty("file.separator") + "com" +
                            System.getProperty("file.separator") + "bootexample4" +
                            System.getProperty("file.separator") + "RoostTest" +
                            System.getProperty("file.separator") + "BulkOperationsTest.csv";
  
  private static String csvLine;
  
  @BeforeAll
  static void readPayloadDataFromCSV() throws Exception {
    Files.lines(Paths.get(filePath)).skip(1).forEach(line -> {
        csvLine = line;
    });
  }
  
  //Test 1
  @Test
  public void bulkUserCreationTest() {
    String[] csvDataLine = csvLine.split("\\^\\|\\^");
    
    given().
      header("Content-Type","application/json").
      body(csvDataLine[3]).
    when().
      post(csvDataLine[1]).
    then().
      assertThat().
      statusCode(Integer.parseInt(csvDataLine[4])).body("message", is(csvDataLine[5]));
  }

  //Test 2
  @Test
  public void bulkPetsAdditionTest() {
    String[] csvDataLine = csvLine.split("\\^\\|\\^");
    
    given().
      header("Content-Type","application/json").
      body(csvDataLine[3]).
    when().
      post(csvDataLine[1]).
    then().
      assertThat().
      statusCode(Integer.parseInt(csvDataLine[4])).body("message", is(csvDataLine[5]));
  }

}
