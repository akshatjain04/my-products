// Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview

// Test generated for /products_post for http method type POST in rest-assured framework

// RoostTestHash=dcd186097b

package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.Test;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

public class ProductsPostTest {

    @Before
    public void setup() {
        RestAssured.baseURI = System.getenv("BASE_URL");
    }

    @Test
    public void productsPostTest() {
        String csvFilePath = "src/test/java/com/bootexample4/RoostTest/products_post.csv";

        try (BufferedReader reader = new BufferedReader(new FileReader(csvFilePath))) {
            String headerLine = reader.readLine();
            String[] headers = headerLine.split(",");

            String line;
            while ((line = reader.readLine()) != null) {
                Map<String, String> productData = createProductDataMap(headers, line.split(","));

                Response response = given()
                        .contentType(ContentType.JSON)
                        .body(productData)
                        .when()
                        .post("/products")
                        .then()
                        .extract().response();

                validateResponse(response);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private Map<String, String> createProductDataMap(String[] headers, String[] data) {
        Map<String, String> map = new HashMap<>();
        for (int i = 0; i < headers.length; i++) {
            map.put(headers[i], data[i]);
        }
        return map;
    }

    private void validateResponse(Response response) {
        int statusCode = response.statusCode();
        switch (statusCode) {
            case 200:
                validateSuccessResponse(response);
                break;
            case 400:
                validateErrorResponse(response);
                break;
            case 404:
                validateNotFoundResponse(response);
                break;
            case 422:
                validateUnprocessableEntityResponse(response);
                break;
            default:
                fail("Unexpected status code: " + statusCode);
        }
    }

    private void validateSuccessResponse(Response response) {
        assertThat(response.jsonPath().getInt("id"), is(notNullValue()));
        assertThat(response.jsonPath().getString("name"), is(notNullValue()));
        assertThat(response.jsonPath().getString("description"), is(notNullValue()));
        assertThat(response.jsonPath().getDouble("price"), is(notNullValue()));
    }

    private void validateErrorResponse(Response response) {
        // Assuming the error response has a 'message' field
        assertThat(response.jsonPath().getString("message"), containsString("Invalid input"));
    }

    private void validateNotFoundResponse(Response response) {
        // Assuming the not found response has a 'message' field
        assertThat(response.jsonPath().getString("message"), containsString("Not Found"));
    }

    private void validateUnprocessableEntityResponse(Response response) {
        // Assuming the unprocessable entity response has a 'errors' field with details
        assertThat(response.jsonPath().getList("errors"), is(not(empty())));
    }
}
