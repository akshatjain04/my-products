/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.bootexample4.RoostTest;

import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;
import io.restassured.RestAssured;
import io.restassured.response.Response;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.*;
import org.apache.commons.lang3.StringUtils;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;
import java.util.NoSuchElementException;

public class Scenario1Test {

  @DataProvider(name = "apiData")
  public Iterator<Object[]> apiData() throws IOException {

    BufferedReader br = new BufferedReader(new FileReader("scenario1Test.csv"));
    String line = null;
    int row = 0;
    while (true) {
      try {
        if (!((line = br.readLine()) != null)) break;
      } catch (NoSuchElementException e) {
        break;
      }
      row++;
      if (row == 1) continue;
      String[] payload = line.split("\\^\\|\\^");
      return new Iterator<Object[]>() {
        public boolean hasNext() {
          return line != null;
        }
        public Object[] next() {
          Object[] current = new Object[]{payload[0], payload[1], payload[2], payload[3], payload[4], payload[5]};
          try {
            line = br.readLine();
          } catch (IOException e) {
            line = null;
          }
          return current;
        }
      };
    }
    br.close();
    return null;
  }

  @Test(dataProvider = "apiData")
  public void scenario(String method, String url, String reqHeaders, String reqBody, String responseCode, String responseBody) {
    String baseUrl = System.getenv().containsKey("API_HOST") ? System.getenv().get("API_HOST") : "http://petstore.swagger.io/v2";
    RestAssured.baseURI = baseUrl;

    Response response = null;
    if (StringUtils.equalsIgnoreCase("GET", method)) {
      response = RestAssured.given().headers(reqHeaders).body(reqBody).get(url);
    } 

    assertThat("Check Response Status Code :", response.getStatusCode(), equalTo(Integer.parseInt(responseCode)));
    assertThat("Check Response Body :", response.getBody().asString(), equalTo(responseBody));
  }
}
