/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by tags","    Given the API running at http://petstore.swagger.io/v2","    When a GET request to /pet/findByTags is made","    And the tags parameter is test","    And the request expects json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import org.junit.BeforeClass;
import org.junit.jupiter.api.Test;
import org.apache.commons.io.FileUtils;
import io.restassured.http.ContentType;
import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

import java.io.File;
import java.io.IOException;

public class scenario1Test {

    private static String API_HOST;
    
    @BeforeClass
    public static void init() {
        API_HOST = System.getenv("API_HOST");
        RestAssured.baseURI = API_HOST;
    }
    
    @Test
    public void findPetByTagsTest() throws IOException {
        String payload = FileUtils.readFileToString(new File("scenario1Test.csv"), "UTF-8");
        String[] data = payload.split("\\^|\\^");
        String method = data[0].replace("\"", "");
        String url = data[1].replace("\"", "");
        String headersData = data[2].replace("\"", "");
        String payloadData = data[3].replace("\"", "");
        int expectedResponseCode = Integer.parseInt(data[4].replace("\"", ""));
        String expectedResponseBody = data[5].replace("\"", "");
        
        given().
                log().all().
                contentType(ContentType.JSON).
                header(headersData).
                body(payloadData).
        when().
                get(url).
        then().
                assertThat().
                statusCode(expectedResponseCode).
                body(expectedResponseBody);
    }
}
