// ********RoostGPT********
/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roostgpt-4-32k

ROOST_METHOD_HASH=db6a36f054
ROOST_METHOD_SIG_HASH=1176f53368

 ########## Scenario ########## 

{
  feature: 'Feature: Petstore E2E Flow\r\n' +
    '    As a user of the Petstore API\r\n' +
    '    I want to manage pets, orders, and user accounts\r\n' +
    '    So that I can run a successful pet store business',
  background: 'Background:\r\n' +
    '        Given the Petstore API is available at "https://petstore.swagger.io/v2"\r\n' +
    '        And I have valid API credentials\r\n' +
    '        And I am authenticated with OAuth2 token with "write:pets" and "read:pets" scopes',
  rule: null,
  scenario: {
    title: 'Scenario: Changed Bulk operations',
    steps: 'Given I have multiple users to create\r\n' +
      'When I create users with array input\r\n' +
      '            | username  | email          | firstName | lastName |\r\n' +
      '            | bulkuser1 | bulk1@test.com | Bulk      | User1    |\r\n' +
      '            | bulkuser2 | bulk2@test.com | Bulk      | User2    |\r\n' +
      'Then all users should be created successfully\r\n' +
      'Given I have multiple pets to add\r\n' +
      'When I add the following pets:\r\n' +
      '            | name    | category | status    |\r\n' +
      '            | Max     | Dog      | available |\r\n' +
      '            | Charlie | Dog      | available |\r\n' +
      'Then all pets should be added successfully',
    examples: ''
  }
}

*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;

import static org.hamcrest.Matchers.equalTo;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import java.io.BufferedReader;
import java.io.FileReader;


public class ChangedBulkOperationsTest {

    private String url;
    private String body;
    private JSONObject headers;
    private String method;
    private int responseCode;
    private JSONObject expectedResponseBody;
    
    @BeforeTest
    public void setUp() throws Exception {
        String filePath = String.format("src%stest%sjava%scom%sbootexample4%sRoostTest%sChangedBulkOperationsTest.csv",
                File.separator, File.separator, File.separator,
                File.separator, File.separator, File.separator);

        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        String line = "";
        int counter = 0;
        while((line=reader.readLine())!=null){
            counter++;
            if(counter == 1) {
                // skip the first line as it contains headers
                continue;
            }
            String[] payloadAttributes = line.split("\\^\\|\\^");
            this.method = payloadAttributes[0];
            this.url = payloadAttributes[1];
            this.headers = (JSONObject) new JSONParser().parse(payloadAttributes[2]);
            this.body = payloadAttributes[3];
            this.responseCode = Integer.parseInt(payloadAttributes[4]);
            this.expectedResponseBody = (JSONObject) new JSONParser().parse(payloadAttributes[5]);
        }
        reader.close();
    }
    
    @Test
    public void testBulkOperations() {
        RequestSpecification request = RestAssured.given();
        request.headers(this.headers);
        if(this.method.equals("POST")) {
            request.body(JSONParser.parse(this.body));
        }
        Response response = request.get(this.url);
        
        //Assert status code
        Assert.assertEquals(response.getStatusCode(), this.responseCode);
        
        //Assert response body
        JSONObject respBody = (JSONObject) new JSONParser().parse(responseBody.asString());
        Assert.assertTrue(respBody.equals(this.expectedResponseBody));
    }
}
