/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.bootexample4.RoostTest;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.is;

public class scenario0Test {

    @Test
    @DisplayName("Find pet by status test")
    void testFindPetByStatus() throws Exception {

        // read payload data from a file
        BufferedReader br = new BufferedReader(new FileReader("scenario0Test.csv"));
        String line = "";
        String csvSplitBy = "\\^\\|\\^";
        String[] payload;
        br.readLine(); // skipping the first row as it contains headers

        while ((line = br.readLine()) != null) {
            payload = line.split(csvSplitBy);

            // Extracting individual elements from the payload
            String method = payload[0];
            String url = payload[1];
            String headers = payload[2];
            String req_body = payload[3];
            int response_code = Integer.parseInt(payload[4]);
            String response_body = payload[5];

            // Making a get request
            given()
                .header("Accept", headers)
                .queryParam("status", req_body)
                .when()
                .get(url)
                .then()
                .assertThat()
                .statusCode(response_code)
                .body("[0].status", is(req_body));
        }
    }
}
