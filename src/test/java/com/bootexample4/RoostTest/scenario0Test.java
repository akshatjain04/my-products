/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.Assert;
import org.testng.annotations.Test;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

/**
 * Test to verify endpoints for Find pet by status
 */
public class scenario0Test {

    @Test
    public void findPetByStatusTest() {
        String csvFile = "scenario0Test.csv";
        BufferedReader br = null;
        String line = "";
        String cvsSplitBy = "\\^\\|\\^";
        
        try {

            br = new BufferedReader(new FileReader(csvFile));
            br.readLine(); // skip header
            while ((line = br.readLine()) != null) {
                String[] apiPayload = line.split(cvsSplitBy);
            
                String method = apiPayload[0];
                String url = apiPayload[1];
                String requestHeaders = apiPayload[2];
                String requestBody = apiPayload[3];
                int responseCode = Integer.parseInt(apiPayload[4]);
                String responseBody = apiPayload[5];
                
                // perform request based on method
                if (method.equals("GET")) {
                    // perform GET request
                    Response response = RestAssured.given().baseUri(url).header("Accept", requestHeaders).get();
                            
                    // validate response
                    Assert.assertEquals(response.getStatusCode(), responseCode, "Expected response code to be " + responseCode);
                  
                    // As per Gherkin scenario, validate response time
                    Assert.assertTrue(response.time() <= 50, "Response should be returned within 50ms");

                    // validate response body
                    Assert.assertEquals(response.getBody().asString(), responseBody, "Expected response body to match provided");
                } 
            }
  
        } catch (IOException e) {
            e.printStackTrace();

        } finally {
            if (br != null) {
                try {
                    br.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
