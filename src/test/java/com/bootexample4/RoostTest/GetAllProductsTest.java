/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get all products\r\n' +
    '        When the client sends a GET request "/api/products" to get the list of all products\r\n' +
    '        Then the list of products returned should be empty',
  title: 'Get all products'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.response.Response;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.testng.Assert;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;

import static io.restassured.RestAssured.given;

public class GetAllProductsTest {
    String baseUrl;
    JSONParser jsonParser = new JSONParser();

    @BeforeTest
    public void beforeTest() {
        baseUrl = System.getenv("API_HOST");
    }

    @Test
    public void getAllProducts() throws Exception {
        BufferedReader br = new BufferedReader(new FileReader("GetAllProductsTest.csv"));
        String line;
        while ((line = br.readLine()) != null) {
            String[] apidata = line.split("^|^");
            String method = apidata[0];
            String url = apidata[1];
            String reqHeaders = apidata[2];
            String reqBody = apidata[3];
            int responseCode = Integer.parseInt(apidata[4]);
            String responseBody = apidata[5];

            Map<String, String> headersMap = new HashMap<>();
            JSONObject headersJson = (JSONObject) jsonParser.parse(reqHeaders);
            for (Object key : headersJson.keySet()) {
                headersMap.put((String) key, (String) headersJson.get(key));
            }

            Headers headers = new Headers(headersMap.entrySet().stream()
                    .map(e -> new Header(e.getKey(), e.getValue()))
                    .collect(Collectors.toList()));

            Response response = 
                given()
                    .baseUri(baseUrl)
                    .headers(headers)
                    .when()
                    .request(method, url)
                    .then()
                    .statusCode(responseCode)
                    .extract()
                    .response();

            Assert.assertEquals(response.getStatusCode(), responseCode);

            if(responseCode == 200){
                Map<String, String> expectedResponseMap = new HashMap<>();
                JSONObject responseJson = (JSONObject) jsonParser.parse(responseBody);
                for (Object key : responseJson.keySet()) {
                    expectedResponseMap.put((String) key, (String) responseJson.get(key));
                }

                JSONObject res = (JSONObject) jsonParser.parse(response.getBody().asString());
                for (String key : expectedResponseMap.keySet()) {
                    Assert.assertEquals(res.get(key).toString(), expectedResponseMap.get(key));
                }
            }
        }
    }
}
