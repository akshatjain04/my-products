/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get all products\r\n' +
    '        When the client sends a GET request "/api/products" to get the list of all products\r\n' +
    '        Then the list of products returned should be empty',
  title: 'Get all products'
}

*/
package com.bootexample4.RoostTest;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.*;
import java.util.*;
import java.io.*;
import org.junit.jupiter.api.Test;


public class GetAllProductsTest {

    @Test
    public void testGetAllProducts() throws IOException {
        String baseUrl = System.getenv("API_HOST");
        String filePath = "GetAllProductsTest.csv";
        BufferedReader br = new BufferedReader(new FileReader(filePath));
        String row = "";
        while ((row = br.readLine()) != null) {
            if (!row.contains("METHOD")) {
                String[] payload = row.split("\\^\\|\\^");
                String method = payload[0];
                String url = payload[1];
                Map<String, String> headers = new HashMap<String, String>();
                headers.put("Content-Type","application/json");
                headers.putAll(parseHeaders(payload[2]));
                String body = payload[3];
                int responseCode = Integer.parseInt(payload[4]);
                String responseBody = payload[5];
                given().baseUri(baseUrl).headers(headers).body(body)
                    .when().request(method, url)
                    .then().statusCode(responseCode).assertThat()
                    .body("id", is(Integer.parseInt(responseCode)))
                    .body("name", is(notNullValue()))
                    .body("description", is(notNullValue()))
                    .body("price", is(notNullValue()));
            }
        }
    }

    private Map<String, String> parseHeaders(String headerString) {
        Map<String, String> headers = new HashMap<String, String>();
        String[] headersArray = headerString.split(", ");
        for (String header : headersArray) {
            String[] keyVal = header.split(": ");
            headers.put(keyVal[0], keyVal[1]);
        }

        return headers;
    }

}
