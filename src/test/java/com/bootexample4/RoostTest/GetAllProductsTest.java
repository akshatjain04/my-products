/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get all products\r\n' +
    '        When the client sends a GET request "/api/products" to get the list of all products\r\n' +
    '        Then the list of products returned should be empty',
  title: 'Get all products'
}

*/
package com.bootexample4.RoostTest;

import com.jayway.restassured.http.ContentType;
import org.apache.commons.lang3.StringUtils;
import com.jayway.restassured.response.Response;
import org.junit.Test;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.util.ArrayList;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;

import static com.jayway.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

public class GetAllProductsTest {
    String scenario_name;
    String base_url;

    public void GetAllProductsTest() {
        // Initialize with example scenario
        this.scenario_name = "Get all products";
        this.base_url = System.getenv("API_HOST");
    }

    @Test
    public void testGetAllProducts()throws FileNotFoundException {
        // load csv file
        BufferedReader reader = new BufferedReader(new FileReader("GetAllProductsTest.csv"));

        String line = reader.readLine(); // skip headers

        while ((line = reader.readLine()) != null) {
            String[] fields = line.split("^|^"); // get individual API fields

            if (fields[1].equals("/api/products")){ // check if this row is for the right API
                Map<String, String> headers = new Gson().fromJson(fields[2], new TypeToken<HashMap<String, String>>() {}.getType());
                String resp_body = new Gson().fromJson(fields[5], new TypeToken<String>() {}.getType());

                given()
                    .contentType(ContentType.JSON)
                    .headers(headers)
                .when()
                    .get(base_url + fields[1])
                .then()
                    .assertThat()
                    .statusCode(is(Integer.parseInt(fields[4])))
                    .and()
                    .body(is(resp_body))
                    .body("id", is(not(StringUtils.EMPTY)))
                    .body("name", is(not(StringUtils.EMPTY)))
                    .body("description", is(not(StringUtils.EMPTY)))
                    .body("price", is(not(StringUtils.EMPTY)));
            }
        }
    }
}
