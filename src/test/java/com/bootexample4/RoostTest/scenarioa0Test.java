/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","',
  title: 'Find pet by status","    Given the API running at http://petstore.swagger.io/v2","    And an endpoint of http://petstore.swagger.io/v2/pet/findByStatus","    When a GET request is made","    And the status parameter is test","    And the Accepts header is application/json","    Then a 200 response is returned within 50ms","","'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.json.JSONObject;
import org.junit.Assert;
import org.junit.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Iterator;

public class scenarioa0Test {

    @Test
    public void test_findPetByStatus() throws IOException {

        String csvFile = "scenarioa0Test.csv";
        BufferedReader reader = new BufferedReader(new FileReader(csvFile));
        String row;

        while ((row = reader.readLine()) != null) {
            String[] data = row.split("^|^");
            if (data[0].equals("GET")) {

                // Extract the necessary data from the csv file
                String method = data[0];
                String url = data[1];

                // Parse the REQ_HEADERS and REQ_BODY to JSONObject
                JSONObject reqHeaders = new JSONObject(data[2]);
                JSONObject reqBody = new JSONObject(data[3]);

                // Response code and body from the csv file
                int responseCode = Integer.parseInt(data[4]);
                JSONObject responseBody = new JSONObject(data[5]);

                // Use Rest Assured to send the request
                Response response = RestAssured.given()
                        .baseUri(url)
                        .headers(reqHeaders.toMap())
                        .body(reqBody.toString())
                        .when()
                        .get()
                        .then()
                        .assertThat().statusCode(responseCode)
                        .contentType(ContentType.JSON)
                        .extract()
                        .response();

                // Assert response body
                for (Iterator<String> it = responseBody.keys(); it.hasNext(); ) {
                    String key = it.next();
                    Assert.assertEquals(responseBody.get(key), response.jsonPath().get(key));
                }
            }
        }
        reader.close();
    }
}
