/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.apache.commons.io.FileUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.junit.jupiter.api.Test;
import java.io.BufferedReader;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Map;
import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class scenario2Test {
    @Test
    public void createPetWithParameters() {
        String payloadFile = "scenario2Test.csv";
        String delimiter = "\\^\\|\\^";
        BufferedReader reader;
        try {
            reader = Files.newBufferedReader(Paths.get(payloadFile));
            String firstLine = FileUtils.readFileToString(Paths.get(payloadFile).toFile(), "UTF-8");
            String[] headers = firstLine.split(delimiter);
            String line;
            while ((line = reader.readLine()) != null) {
                int i=0;
                String[] payload = line.split(delimiter);
                String methodType = payload[i++];
                String url = payload[i++];
                String reqHeaders = payload[i++];
                String reqBody = payload[i++];
                int responseCode = Integer.parseInt(payload[i++]);
                String responseBody = payload[i++];
                RestAssured.baseURI = System.getenv().get("API_HOST");
                Map headersMap = (Map)new JSONParser().parse(reqHeaders);
                String requestBody = payload[i];
                JSONObject requestjson = (JSONObject)new JSONParser().parse(requestBody);
                Response response = given().headers(headersMap).body(requestjson.toJSONString()).
                        when().request(methodType, url).
                        then().contentType(ContentType.JSON).extract().response();
                assertEquals(responseCode, response.getStatusCode(), "Status Code Check Failed!");
                JSONObject responseJson = (JSONObject)new JSONParser().parse(response.asString());
                JSONObject expectedJson = (JSONObject) new JSONParser().parse(responseBody);
                assertEquals(expectedJson.toJSONString(), responseJson.toJSONString(), "Response Body Check Failed");
            }
        }catch (Exception e) {
            e.printStackTrace();
        }
    }
}
