/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: null,
  rule: null,
  scenario: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","',
  title: 'Create pet with parameters","    Given the API running at http://petstore.swagger.io/v2","    When a POST request to /pet is made","    And name is doggies","    And status is available","    Then a 200 response is returned within 50ms","","'
}

*/
package com.bootexample4.RoostTest;

import org.junit.Test;
import org.junit.runner.RunWith;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.Matchers.*;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import io.restassured.http.ContentType;
import io.restassured.parsing.Parser;
import io.restassured.response.Response;
import io.restassured.runner.RestAssuredRunner;

@RunWith(RestAssuredRunner.class)
public class scenario2Test {

    private static final String DELIMITER = "^|^";
    private static final String FILE_NAME = "scenario2Test.csv";
    private static final String HOST = System.getenv("API_HOST");
    private static final String URL = HOST + "/v2/pet";

    @Test
    public void CreatePetWithParameters() throws Exception {
        byte[] payloadData = Files.readAllBytes(Paths.get(FILE_NAME));
        String[] payloads = new String(payloadData, "UTF-8").split("\\n");
        JSONParser parser=new JSONParser();  

        for (int i = 1; i < payloads.length; i++) {
            String[] data = payloads[i].split(DELIMITER);
            String method = data[0].trim();
            String url = data[1].trim();
            Map<String, String> headers = (Map<String,String>)parser.parse(data[2].trim());
            JSONObject reqBody = (JSONObject) parser.parse(data[3].trim());
            int resCode = Integer.parseInt(data[4].trim());

            // Expected successful behavior: The pet is created successfully and their information is returned with a 200 response code.
            if (method.equalsIgnoreCase("POST")) {
                Response response = 
                    given()
                        .contentType(ContentType.JSON)
                        .headers(headers)
                        .body(reqBody)
                    .when()
                        .post(url)
                    .then()
                        .assertThat()
                        .statusCode(resCode)
                        .body("name", equalTo(reqBody.get("name")))
                        .body("status", equalTo(reqBody.get("status")))
                        .extract()
                        .response();
            }
        }
    }
}
