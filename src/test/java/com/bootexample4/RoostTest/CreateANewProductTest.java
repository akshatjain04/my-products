/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Create a new product\r\n' +
    '        Given the client provides the following product data:\r\n' +
    '            | name         | description             | price |\r\n' +
    '            | Test Product | This is a test product. | 10.0  |\r\n' +
    '        When the client sends a POST request to "/api/products"\r\n' +
    '        Then the saved product should not be null and its properties must correspond to those provided by client',
  title: 'Create a new product'
}

*/
package com.bootexample4.RoostTest;

import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import io.restassured.http.ContentType;
import io.restassured.response.Response;

public class CreateANewProductTest {
    private static String BASE_URL = System.getenv("API_HOST");

    // Sample method to read CSV file 
    public ArrayList<String> readCSVData(String filePath) {
        BufferedReader reader = new BufferedReader(new FileReader(filePath));
        ArrayList<String> payloadData = new ArrayList<>();
        String line = "";
        while ((line = reader.readLine()) != null) {
            payloadData.add(line);
        }
        return payloadData;
    }

    @Test
    public void createANewProductTest() {
        // Reading data from CSV file
        ArrayList<String> payloadData = readCSVData("CreateANewProductTest.csv");

        // Fetching payload for every test scenario
        for (String data: payloadData) {

            // Splitting the data using delimiter
            String[] payload = data.split("^|^");

            // Fetching individual data (parsing if stringified)
            String method = payload[0];
            String url = payload[1];
            String reqHeaders = payload[2];
            String reqBody = payload[3];
            int responseCode = Integer.parseInt(payload[4]);
            String resBody = payload[5];

            Response response = 
                given().
                    contentType(ContentType.JSON).
                    baseUri(BASE_URL + url).
                    headers(reqHeaders).
                    body(reqBody).
                when().
                    request(method).
                then().
                    assertThat().
                    statusCode(responseCode).
                    body(is(resBody)).
                    extract().
                    response();

            // Assertion for non-null product
            assertNotNull(response, "Saved Product is NULL");

            // Additional property assertions can be added as per requirement
        }
    }
}
