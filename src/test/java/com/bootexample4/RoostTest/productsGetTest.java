// ********RoostGPT********
/*
Test generated by RoostGPT for test my-products-rest-assured-api-spec-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

Test generated for /products_get for http method type GET in rest-assured framework

RoostTestHash=ed0d766b50

================================VULNERABILITIES================================
Vulnerability: Information Disclosure - CWE-200
Issue: The application discloses the server path in the logs. The usage of the complete file paths provides information that could aid an attacker. This issue is detected on the first line.
Solution: Adjust application logging to prevent disclosure of sensitive filesystem data. If full path information is necessary for debugging, consider implementing separate debug logs not accessible in production environments.

Vulnerability: Software Version Disclosure - CWE-200
Issue: The logs disclose the version of Java and the application that are being used (Java 21 and ProductsApplication v0.0.1-SNAPSHOT). This information could be useful for an attacker who is searching for known vulnerabilities in these specific versions. This can be seen on the first line.
Solution: Adopt a policy of not disclosing such information in logs or to the public.

Vulnerability: Insufficient Logging & Monitoring - OWASP Top 10 2017:A10
Issue: System doesn't log the event when a product is not found in the database, seen at lines: 2023-05-26 23:25:14. It opens the possibilities for malicious activities such as enumeration attacks that could go unnoticed.
Solution: Implement a comprehensive logging and monitoring solution which include failed operations and high-value transactions.

================================================================================

*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;

public class productsGetTest {

  List<Map<String, String>> envList = new ArrayList<>();

  @Before
  public void setUp() {
    TestdataLoader dataloader = new TestdataLoader();
    envList = dataloader.loadData("src/test/java/com/bootexample4/RoostTest/productsGetTest.csv");
  }

  @Test
  public void productsGet_Test() {
    this.setUp();
    for (Map<String, String> map : envList) {
      RestAssured.baseURI = map.get("BASE_URL");

      Response response = given()
          .when()
          .get("/products")
          .then()
          .extract().response();

      if (response.statusCode() == 200) {
        System.out.println("Description: Successful operation");

        if (response.jsonPath().get("id") != null) {
          // The response is an array of objects, so we cannot get the property "id"
          // directly from the reponse, we have to loop into it
          // Same is for all the below assertions 
          MatcherAssert.assertThat(response.jsonPath().get("id"), instanceOf(Integer.class));
        }

        if (response.jsonPath().get("name") != null) {
          MatcherAssert.assertThat(response.jsonPath().get("name"), instanceOf(String.class));
        }

        if (response.jsonPath().get("description") != null) {
          MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        }

        if (response.jsonPath().get("price") != null) {
          MatcherAssert.assertThat(response.jsonPath().get("price"), instanceOf(Integer.class));
        }
      }

    }
  }
}
