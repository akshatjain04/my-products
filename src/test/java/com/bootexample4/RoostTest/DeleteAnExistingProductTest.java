/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Delete an existing product\r\n' +
    '        Given there is an existing product with ID 1\r\n' +
    '        When the client sends a DELETE request to "/api/products/1"\r\n' +
    '        Then the response status code should be 200\r\n' +
    '        And the product with ID 1 should no longer exist',
  title: 'Delete an existing product'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import static io.restassured.RestAssured.given;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class DeleteAnExistingProductTest {

    @BeforeAll
    public static void setup() {
        RestAssured.baseURI = System.getenv("API_HOST");
    }

    @Test
    public void deleteAnExistingProduct() throws IOException {

        BufferedReader reader = new BufferedReader(new FileReader("DeleteAnExistingProductTest.csv"));
        String line;
        while ((line = reader.readLine()) != null) {
            String[] row = line.split("\\^\\|\\^");
            if(row[0].equals("METHOD") && row[0].equalsIgnoreCase("DELETE")) {
                RequestSpecification request = given();
                request.header("Content-Type", ContentType.JSON);

                Response response = request.delete("/api/" + row[1]);
                assertEquals(200, response.getStatusCode(), "Expected response code to be 200");
                assertEquals("{\"description\":\"Product deleted\"}", response.getBody().asString(), "Expected product to be deleted");

                response = request.get("/api/" + row[1]);
                assertEquals(404, response.getStatusCode(), "Expected response code to be 404");
                assertEquals("{\"description\":\"Product not found\"}", response.getBody().asString(), "Expected product not to be found");
            }
        }
        reader.close();
    }
}
