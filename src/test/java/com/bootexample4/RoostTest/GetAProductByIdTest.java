/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get a product by ID\r\n' +
    '        Given there is an existing product with ID 1\r\n' +
    '        When the client sends a GET request "/api/products/1" to get a product by its id\r\n' +
    '        Then the response status code should be 200\r\n' +
    '        And the response should contain the product with ID 1',
  title: 'Get a product by ID'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import static org.hamcrest.Matchers.*;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

import org.json.JSONException;
import org.json.JSONObject;
import org.junit.Before;
import org.junit.Test;

public class GetAProductByIdTest {
    String baseUri = System.getenv("API_HOST");
    String apiUrl ="/api/products/{productId}";
    String fullUrl = baseUri + apiUrl;

    @Before
    public void setup() {
        RestAssured.baseURI = fullUrl;
    }

    @Test
    public void getProductById_successful() throws IOException, JSONException {
        BufferedReader br = new BufferedReader(new FileReader("GetAProductByIdTest.csv"));
        String line = "";
        line = br.readLine();  // Skipping the header

        while ((line = br.readLine()) != null) {

            // Split the content of the csv file into the different objects using the delimiter "^|^"
            String[] fields = line.split("\\^\\|\\^");

            // Parse the fields into respective objects
            String method = fields[0];
            String url = fields[1];
            JSONObject reqHeaders = new JSONObject(fields[2]);
            JSONObject reqBody = new JSONObject(fields[3]);
            int responseCode = Integer.parseInt(fields[4]);
            JSONObject responseBody = new JSONObject(fields[5]);

            Response response = 
                        given().
                            pathParam("productId", 1).
                            contentType(reqHeaders.getString("Content-Type")).
                            body(reqBody).
                        when().
                            get().
                        then().
                            assertThat().
                            statusCode(responseCode). 
                            body("id", equalTo(responseBody.getInt("id"))).
                            body("name", equalTo(responseBody.getString("name"))).
                            body("description", equalTo(responseBody.getString("description"))).
                            body("price", equalTo(responseBody.getInt("price"))).
                            extract().
                            response();

            // Clean up
            br.close();
        }
    }

    @Test
    public void getProductById_productNotFound() throws IOException, JSONException {
        BufferedReader br = new BufferedReader(new FileReader("GetAProductByIdTest.csv"));
        String line = "";
        line = br.readLine();  // Skipping the header

        while ((line = br.readLine()) != null) {

            // Split the content of the csv file into the different objects using the delimiter "^|^"
            String[] fields = line.split("\\^\\|\\^");

            // Parse the fields into respective objects
            String method = fields[0];
            String url = fields[1];
            JSONObject reqHeaders = new JSONObject(fields[2]);
            JSONObject reqBody = new JSONObject(fields[3]);
            int responseCode = Integer.parseInt(fields[4]);
            JSONObject responseBody = new JSONObject(fields[5]);

            Response response = 
                        given().
                            pathParam("productId", 999999).
                            contentType(reqHeaders.getString("Content-Type")).
                            body(reqBody).
                        when().
                            get().
                        then().
                            assertThat().
                            statusCode(responseCode).
                            body("description", equalTo(responseBody.getString("description"))).
                            extract().
                            response();

            // Clean up
            br.close();
        }
    }
}
