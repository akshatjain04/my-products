/*
Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roost-gpt4-32k

{
  background: 'Given the base URL is "http://localhost:8080"',
  rule: null,
  scenario: 'Get a product by ID\r\n' +
    '        Given there is an existing product with ID 1\r\n' +
    '        When the client sends a GET request "/api/products/1" to get a product by its id\r\n' +
    '        Then the response status code should be 200\r\n' +
    '        And the response should contain the product with ID 1',
  title: 'Get a product by ID'
}

*/
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.test.context.junit4.SpringRunner;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import static org.hamcrest.Matchers.equalTo;

@RunWith(SpringRunner.class)
public class GetAProductByIdTest {

    @Test
    public void testGetProductById() throws IOException {
        BufferedReader br = new BufferedReader(new FileReader("GetAProductByIdTest.csv"));

        String line = "";
        br.readLine(); //skip header
        while ((line = br.readLine()) != null) {

            String[] testData = line.split("^|^");

            String method = testData[0];
            String url = testData[1];
            String reqHeaders = testData[2];
            String reqBody = testData[3];
            int responseCode = Integer.parseInt(testData[4]);
            String responseBody = testData[5];

            // Ignore if method is not GET
            if (!method.equals("GET")) {
                continue;
            }

            // set base URI
            RestAssured.baseURI = System.getenv("API_HOST")+"/api";

            // set headers
            //String reqHeadersMap = reqHeaders //convert your reqHeaders string to Java Map

            Response response = RestAssured.given()
                    .headers("") // pass headers map
                    .when()
                    .get(url)
                    .then()
                    .assertThat()
                    .statusCode(responseCode).extract().response();

            //check response
            try {
                response.then().assertThat().body("id", equalTo(Integer.valueOf(responseBody)));
            } catch (AssertionError ae) {
                System.err.println("Response id does not match. Expected body: " + responseBody);
            }

        }
        br.close();
    }

}
