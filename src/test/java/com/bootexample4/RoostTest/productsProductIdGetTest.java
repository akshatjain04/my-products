// ********RoostGPT********
/*
Test generated by RoostGPT for test my-products-rest-assured-api-spec-test using AI Type Azure Open AI and AI Model roost-gpt4-32k

Test generated for /products/{productId}_get for http method type GET in rest-assured framework

RoostTestHash=52a171b52e

================================================================================

*/

// ********RoostGPT********
package com.bootexample4.RoostTest;

import io.restassured.RestAssured;
import io.restassured.response.Response;
import org.junit.Before;
import org.junit.jupiter.api.Test;
import static io.restassured.RestAssured.given;
import java.util.Map;
import java.util.ArrayList;
import java.util.List;
import org.hamcrest.MatcherAssert;
import static org.hamcrest.Matchers.*;

public class productsProductIdGetTest {

  List<Map<String, String>> envList = new ArrayList<>();

  @Before
  public void setUp() {
    TestdataLoader dataloader = new TestdataLoader();
    envList = dataloader.loadData("src/test/java/com/bootexample4/RoostTest/products_productIdGetTest.csv");
  }

  @Test
  public void productsProductIdGet_Test() {
    this.setUp();
    for (Map<String, String> map : envList) {
      RestAssured.baseURI = map.get("BASE_URL");

      Response response = given()
          .pathParam("productId", map.get("productId") != null ? map.get("productId") : "")
          .when()
          .get("/products/{productId}")
          .then()
          .extract().response();

      if (response.statusCode() == 200) {
        System.out.println("Description: successful operation");

        if (response.jsonPath().get("id") != null) {
          MatcherAssert.assertThat(response.jsonPath().get("id"), instanceOf(Integer.class));
        }

        if (response.jsonPath().get("name") != null) {
          MatcherAssert.assertThat(response.jsonPath().get("name"), instanceOf(String.class));
        }

        if (response.jsonPath().get("description") != null) {
          MatcherAssert.assertThat(response.jsonPath().get("description"), instanceOf(String.class));
        }

        if (response.jsonPath().get("price") != null) {
          MatcherAssert.assertThat(response.jsonPath().get("price"), instanceOf(Integer.class));
        }
      }
      if (response.statusCode() == 404) {
        System.out.println("Description: Product not found");
      }

    }
  }
}
