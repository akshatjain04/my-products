# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet/{petId}_post for http method type POST 
# RoostTestHash=c0bc5294a0
# 
# 

# ********RoostGPT********
Feature: Updates a pet in the store with form data

  Background:
    * def urlBase = karate.properties['PETSTORE_API_HOST']
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['PETSTORE_AUTH_TOKEN']) }

  Scenario Outline: Update a pet in the store with form data using valid inputs
    Given path 'v2/pet/<petId>'
    And request
      """
      {
        "name": "<name>",
        "status": "<status>"
      }
      """
    When method POST
    Then status 200
    And match response == '#object'
    And match response.id == '#number'
    And match response.category == '#object'
    And match response.category.name == '#string'
    And match response.name == '<name>'
    And match response.photoUrls == '#array'
    And match response.tags == '#array'
    And match response.tags[*].name == '#string'
    And match response.status == '<status>'

    Examples:
      | read('pet_petId_post.csv') |

  Scenario: Update a pet with invalid input
    Given path 'v2/pet/999999'
    And request
      """
      {
        "name": "Unknown",
        "status": "unknown"
      }
      """
    When method POST
    Then status 405
    And match response == null

  Scenario Outline: Check if response contains necessary headers and assert types
    Given path 'v2/pet/<petId>'
    And request
      """
      {
        "name": "<name>",
        "status": "<status>"
      }
      """
    When method POST
    Then status 200
    And match response == '#object'
    And match response contains
      """
      {
        "id": "#number",
        "name": "#string",
        "status": "#string"
      }
      """

    Examples:
      | read('pet_petId_post.csv') |
