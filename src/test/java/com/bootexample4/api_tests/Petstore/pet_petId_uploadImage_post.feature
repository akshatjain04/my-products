# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /pet/{petId}/uploadImage_post for http method type POST 
# RoostTestHash=8dac89cb33
# 
# 

# ********RoostGPT********
Feature: Test scenarios for uploading an image to pet using /v2/pet/{petId}/uploadImage endpoint

  Background:
    * def urlBase = karate.properties['PET_BASE_URL']
    * url urlBase
    * configure headers = { Authorization: #(karate.properties['PET_AUTH_TOKEN']) }
    * configure retry = { count: 3, interval: 2000 }

  Scenario Outline: Upload an image successfully
    Given path 'v2', 'pet', <petId>, 'uploadImage'
    And form field additionalMetadata = <additionalMetadata>
    And multipart file file =
      """
      {
        read: <filePath>,
        filename: 'pet_image.jpg',
        contentType: 'image/jpeg'
      }
      """
    When method POST
    Then status 200
    And match response.code == '#number'
    And match response.type == '#string'
    And match response.message == '#string'

    Examples:
      | read('pet_petId_uploadImage_post.csv') |

  Scenario: Upload without image and metadata
    Given path 'v2', 'pet', 12345, 'uploadImage'
    When method POST
    Then status 400
    And match response ==
      """
      {
        message: '#string',
        code: '#number',
        type: '#string'
      }
      """

  Scenario: Upload with invalid petId
    Given path 'v2', 'pet', 99999, 'uploadImage'
    And form field additionalMetadata = 'Invalid Test'
    When method POST
    Then status 404
    And match response ==
      """
      {
        message: '#string'
      }
      """
