# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Azure Open AI and AI Model roostgpt-4-32k
# 
# Feature file generated for /nobelPrizes_get for http method type GET 
# RoostTestHash=4940f5c55b
# 
# 

# ********RoostGPT********
Feature: Nobel Prizes API Validation
  Description: Validate the functionality of the Nobel Prizes API endpoint /2.1/nobelPrizes

  Background:
    * def urlBase = karate.properties['NOBEL_API_HOST']
    * url urlBase

  Scenario: Validate successful fetching of Nobel Prizes with valid parameters
    Given path '2.1/nobelPrizes'
    And params { 
      offset: 0,
      limit: 10,
      sort: 'asc',
      nobelPrizeYear: 2020,
      yearTo: 2021,
      nobelPrizeCategory: 'phy' 
    }
    When method GET
    Then status 200
    And match response.nobelPrizes == '#[]'
    And match response.nobelPrizes[*].awardYear == '#number'
    And match response.nobelPrizes[*].category.en == '#string'
    And match response.nobelPrizes[*].categoryFullName.en == '#string'
    And match response.nobelPrizes[*].dateAwarded == '#string'
    And match response.nobelPrizes[*].prizeAmount == '#number'
    And match response.nobelPrizes[*].prizeAmountAdjusted == '#number'
    And match response.nobelPrizes[*].laureates == '#array'
    And match response.nobelPrizes[*].laureates[*].id == '#number'
    And match response.nobelPrizes[*].laureates[*].name.en == '#string'
    And match response.nobelPrizes[*].laureates[*].portion == '#string'
    And match response.nobelPrizes[*].laureates[*].sortOrder == '#string'
    And match response.nobelPrizes[*].laureates[*].links[*].rel == '#string'
    And match response.meta.count == '#number'
    And match response.links.first == '#string'

  Scenario Outline: Test different sort orders and formats
    Given path '2.1/nobelPrizes'
    And params {
      offset: <offset>,
      limit: <limit>,
      sort: <sort>,
      format: <format>
    }
    When method GET
    Then status 200
    And match response.nobelPrizes[*].awardYear == '#number'
    And match response.meta.offset == '#number'
    And match response.meta.limit == '#number'

    Examples:
      | offset | limit | sort | format |
      |      0 |    10 | asc  | json   |
      |     10 |     5 | desc | json   |

  Scenario Outline: Validate expected 400 Bad Request for malformed query
    Given path '2.1/nobelPrizes'
    And params {
      offset: <offset>,
      limit: <limit>
    }
    When method GET
    Then status 400
    And match response.code == '404'
    And match response.message == '#string'

    Examples:
      | offset | limit |
      |     -1 |     0 |

  Scenario Outline: Validate not found response 404
    Given path '2.1/nobelPrizes'
    And params { 
      nobelPrizeYear: <invalidYear>
    }
    When method GET
    Then status 404
    And match response.code == '404'
    And match response.message == '#string'

    Examples:
      | invalidYear |
      |        1800 |
