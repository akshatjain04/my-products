# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /accounts_post for http method type POST 
# RoostTestHash=53e96f9805
# 
# 

# ********RoostGPT********
Feature: Create new Account

  Background:
    * def urlBase = karate.properties['url.base'] || 'http://localhost:4010'
    * url urlBase
    * def authToken = karate.properties['AUTH_TOKEN']

  Scenario Outline: Create a new account with valid email and optional commit-hash header
    Given path '/accounts'
    And header Commit-Hash = '<commitHash>'
    And header Authorization = 'Bearer ' + authToken
    And request { email: '<email>' }
    When method post
    Then status 201
    And match header api-version == '1.0.0'
    And match header Commit-Hash == '#? _ != null'
    And match response == '#object'

    Examples:
      | email               | commitHash |
      | 'user@example.com'  | '928d28d'  |
      | 'user2@example.com' | null       |

  Scenario Outline: Create a new account with invalid email pattern
    Given path '/accounts'
    And header Commit-Hash = '<commitHash>'
    And header Authorization = 'Bearer ' + authToken
    And request { email: '<email>' }
    When method post
    Then status 400
    And match response.description == 'Descriptive Error Message'
    And match response.error contains 'validation/'

    Examples:
      | email           | commitHash |
      | 'invalid_email' | '928d28d'  |
      | 'user@example'  | null       |

  Scenario Outline: Create a new account without authorization token
    Given path '/accounts'
    And header Commit-Hash = '<commitHash>'
    And request { email: '<email>' }
    When method post
    Then status 401
    And match response.description == 'Descriptive Error Message'
    And match response.error == 'error/code'

    Examples:
      | email               | commitHash |
      | 'user@example.com'  | '928d28d'  |
      | 'user2@example.com' | null       |
