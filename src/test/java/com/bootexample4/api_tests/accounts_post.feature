# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Open AI and AI Model gpt-4-1106-preview
# 
# Feature file generated for /accounts_post for http method type POST 
# RoostTestHash=53e96f9805
# 
# 

# ********RoostGPT********
Feature: Create new Account

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:8080')
    * url urlBase

  Scenario Outline: Create a new account with valid email and optional commit-hash header
    Given path '/accounts'
    And request
    """
    { email: '<email>' }
    """
    And header Commit-Hash = '<commit_hash>'
    When method POST
    Then status 201
    And match header api-version == '1.0.0'
    And match header commit-hash == '#present'
    And match responseHeaders contains { 'Content-Type': '#regex(application/json.*)' }

    Examples:
      | email              | commit_hash |
      | 'user@example.com' | '1234567'   |
      | 'test@domain.com'  | null        |

  Scenario Outline: Create a new account with invalid email and check for bad request
    Given path '/accounts'
    And request
    """
    { email: '<email>' }
    """
    When method POST
    Then status 400
    And match header api-version == '1.0.0'
    And match response contains { error: '#string', description: '#string' }

    Examples:
      | email          |
      | 'invalidemail' |
      | 'user@.com'    |

  Scenario Outline: Create a new account with invalid commit-hash header format
    Given path '/accounts'
    And request
    """
    { email: 'valid@example.com' }
    """
    And header Commit-Hash = '<commit_hash>'
    When method POST
    Then status 400
    And match header api-version == '1.0.0'
    And match response contains { error: '#regex(validation/.*)', description: '#string', schema_field: '#string', value: '#notnull' }

    Examples:
      | commit_hash |
      | 'abcdefg'   |
      | '1234'      |
