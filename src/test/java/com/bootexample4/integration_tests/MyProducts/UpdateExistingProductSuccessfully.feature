# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Claude AI and AI Model claude-3-5-haiku-20241022
# 
# ROOST_METHOD_HASH=9d632d4167
# ROOST_METHOD_SIG_HASH=66039e700e
# 
#  ########## Scenario ########## 
# 
# {
#   feature: 'Feature: Product Management Functionality\n' +
#     '  As a user of the product management system\n' +
#     '  I want to interact with product-related operations\n' +
#     '  So that I can manage the product catalog effectively',
#   background: 'Background:\n' +
#     '    Given the Product Management API is up and running\n' +
#     '    And the product repository is initialized with test data',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Update an existing product successfully',
#     steps: 'Given a product exists in the database with ID 1\n' +
#       'And I have an updated product payload:\n' +
#       '      | name            | description               | price |\n' +
#       '      | Updated Laptop  | Improved performance      | 1099.99 |\n' +
#       'When I send a PUT request to "/products/1" endpoint using ProductController with the updated product payload\n' +
#       'Then the response status code should be 200\n' +
#       'And the response body should reflect the updated product details\n' +
#       'And the product in the database should be updated with the new information',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
Feature: Product Management Functionality

  Background:
    * def urlBase = karate.properties['url.base'] || 'http://localhost:4010'
    * url urlBase

  Scenario: Update an existing product successfully
    * def petPayload =
      """
      {
          "id": 1,
          "name": "Original Laptop",
          "photoUrls": ["http://example.com/original-laptop.jpg"],
          "status": "available",
          "category": {
              "id": 1,
              "name": "Electronics"
          }
      }
      """
    Given path '/pet'
    And request petPayload
    And header Authorization = 'Bearer ' + karate.properties['AUTH_TOKEN']
    When method PUT
    Then status 200
    * def updatedPetPayload =
      """
      {
          "id": 1,
          "name": "Updated Laptop",
          "photoUrls": ["http://example.com/updated-laptop.jpg"],
          "status": "available",
          "category": {
              "id": 1,
              "name": "Electronics"
          }
      }
      """
    Given path '/pet'
    And request updatedPetPayload
    And header Authorization = 'Bearer ' + karate.properties['AUTH_TOKEN']
    When method PUT
    Then status 200
    And match response.name == "Updated Laptop"
    Given path '/pet/1'
    And header Authorization = 'Bearer ' + karate.properties['AUTH_TOKEN']
    When method GET
    Then status 200
    And match response.name == "Updated Laptop"
