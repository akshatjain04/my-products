# ********RoostGPT********

# Test generated by RoostGPT for test MiniProjects using AI Type Claude AI and AI Model claude-3-5-haiku-20241022
# 
# ROOST_METHOD_HASH=0726c7d40e
# ROOST_METHOD_SIG_HASH=8d20b93733
# 
#    ########## Scenario ##########  
# 
# {
#   feature: 'Feature: Product Update Functionality\n' +
#     '  As a user of the product management system\n' +
#     '  I want to update existing products\n' +
#     '  So that I can modify product information',
#   background: 'Background:\n' +
#     '    Given the Product Management API is running at "http://localhost:8080/products"\n' +
#     '    And the product repository is initialized with test data',
#   rule: null,
#   scenario: {
#     title: 'Scenario: Ensure update operation performance',
#     steps: 'Given a product exists in the repository with the following details:\n' +
#       '      | id | name           | description               | price |\n' +
#       '      | 1  | Original Phone | A basic smartphone model  | 199.99|\n' +
#       'When I send a PUT request to "/products/1" with the following JSON payload:\n' +
#       '      """\n' +
#       '      {\n' +
#       '        "name": "Updated Phone",\n' +
#       '        "description": "An improved smartphone",\n' +
#       '        "price": 249.99\n' +
#       '      }\n' +
#       'Then the response should be returned within 1 second',
#     examples: ''
#   }
# }
# 

# ********RoostGPT********
config:
  target: "http://localhost:8080"
  phases:
    - duration: 30
      arrivalRate: 5
  defaults:
    headers:
      Content-Type: application/json
      Authorization: "{{ $processEnvironment.AUTH_TOKEN }}"

scenarios:
  - name: "Product Update Performance Test"
    flow:
      - log: "Preparing to update product with ID 1"
      
      - put:
          url: "/products/1"
          json:
            name: "Updated Phone"
            description: "An improved smartphone"
            price: 249.99
          capture:
            - json: "$.id"
              as: "updatedProductId"
          expect:
            - statusCode: 200
            - contentType: "application/json"
            - responseTimeLessThan: 1000
            
            # Detailed response body assertions
            - hasProperty: "id"
            - hasProperty: "name"
            - hasProperty: "description"
            - hasProperty: "price"
            
            # Validate updated fields
            - jmespath: "name == 'Updated Phone'"
            - jmespath: "description == 'An improved smartphone'"
            - jmespath: "price == 249.99"
      
      - log: "Product update completed successfully"
